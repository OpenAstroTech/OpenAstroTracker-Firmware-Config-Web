// Common step definitions shared across all tracker configurations

// Tracker Selection Step
export const createTrackerSelectionStep = () => ({
    id: 'TR',
    title: 'Tracker',
    label: 'For which tracker do you want to generate firmware:',
    variable: 'tracker',
    preamble: [
        '/////////////////////////////////////////////////////////////////////////////////////////////////////////',
        '// This configuration file was generated by the OpenAtroTech Configurator at https://config.openastrotech.com',
        '// and is for firmware to be used on a {v}.',
        '// Save this as Configuration_local.hpp in the folder where you placed the firmware code.',
        '/////////////////////////////////////////////////////////////////////////////////////////////////////////',
        '/////////////////////////////////////////////////////////////////////////////////////////////////////////',
    ],
    define: '',
    control: {
        type: 'radioimg',
        choices: [
            { key: 'OAT', value: 'OpenAstroTracker', image: '/images/oat.png', defineValue: '' },
            { key: 'OAM', value: 'OpenAstroMount', image: '/images/oam.png', defineLine: '#define OAM' },
            { key: 'OAE', value: 'OpenAstroExplorer', image: '/images/oae.png', defineLine: '#define OAE' }
        ]
    },
});

// Hemisphere Selection Step
export const createHemisphereStep = () => ({
    id: 'HS',
    title: 'Hemisphere',
    label: 'Which hemisphere do you live in:',
    variable: 'hemi',
    preamble: ['// We live in the {v}'],
    define: 'NORTHERN_HEMISPHERE',
    control: {
        type: 'radioimg',
        choices: [
            { key: 'N', value: 'Northern Hemisphere', image: '/images/north.png', defineValue: '1' },
            { key: 'S', value: 'Southern Hemisphere', image: '/images/south.png', defineValue: '0' }
        ]
    },
});

// Tracking on boot step
export const createTrackingOnBootStep = () => ({
    id: 'RTR',
    title: 'Tracking on boot',
    label: 'Do you want the mount to start tracking after boot:',
    variable: 'trackonboot',
    preamble: ['// Track immediately after boot'],
    postamble: [{
        condition: "($tracker == OAT)",
        literal: [
            '',
            '// Define limits for RA... ',
            '#define RA_LIMIT_LEFT     5.5f',
            '#define RA_LIMIT_RIGHT    6.5f',
            '#define RA_TRACKING_LIMIT 6.75f // can\'t quite get to 7h...',
        ]
    },
    {
        condition: "($tracker != OAT)",
        literal: [
            '',
            '// Define limits for RA... ',
            '#define RA_LIMIT_LEFT     6.0f',
            '#define RA_LIMIT_RIGHT    6.0f',
            '#define RA_TRACKING_LIMIT 6.5f',
        ]
    }],
    define: 'TRACK_ON_BOOT',
    control: {
        type: 'radioimg',
        choices: [
            { key: 'Y', value: 'Yes, immediately start tracking', image: '/images/none.png', defineValue: '1' },
            { key: 'N', value: 'No, don\'t track until enabled', image: '/images/none.png', defineValue: '0' },
        ]
    },
});

// Board selection step (OAT/OAM)
export const createBoardStep = () => ({
    id: 'BD',
    title: 'Board',
    label: 'Which microcontroller board are you using:',
    variable: 'board',
    preamble: ['// We are using the {v} board'],
    postamble: [{
        literal: [
            '#if defined(BOARD) && BOARD != {v}',
            '    #error Selected PIO environment does not match this configuration',
            '#else',
            '    #define BOARD {v}',
            '#endif'
        ]
    }],
    control: {
        type: 'radioimg',
        choices: [
            { key: 'M', value: 'RAMPS c/w ATMega 2560 (or clone)', image: '/images/mega2560.png', defineValue: 'BOARD_AVR_RAMPS' },
            { key: 'E', value: 'ESP32', image: '/images/esp32.png', defineValue: 'BOARD_ESP32_ESP32DEV' },
            { key: 'M10', value: 'MKS GEN L V1.0', image: '/images/mksv10.png', defineValue: 'BOARD_AVR_MKS_GEN_L_V1' },
            { key: 'M20', value: 'MKS GEN L V2.0', image: '/images/mksv20.png', defineValue: 'BOARD_AVR_MKS_GEN_L_V2' },
            { key: 'M21', value: 'MKS GEN L V2.1', image: '/images/mksv21.png', defineValue: 'BOARD_AVR_MKS_GEN_L_V21' },
            { key: 'OAEV1', value: 'OAE_V1', image: '/images/oaeboard.png', defineValue: 'BOARD_OAE_V1' },
        ]
    },
});

// RA Driver step (OAT/OAM)
export const createRADriverStep = () => ({
    id: 'RDO',
    title: 'RA Driver',
    label: 'Which driver board are you using to drive the RA stepper motor:',
    variable: 'radrv',
    preamble: ['// Using the {v} driver for RA stepper motor'],
    define: 'RA_DRIVER_TYPE',
    control: {
        type: 'radioimg',
        choices: [
            { key: 'A', value: 'Generic A4988', image: '/images/a4988.png', defineValue: 'DRIVER_TYPE_A4988_GENERIC' },
            { key: 'TU', value: 'TMC2209-UART', image: '/images/tmc2209.png', defineValue: 'DRIVER_TYPE_TMC2209_UART' },
            { key: 'TS', value: 'TMC2209-Standalone', image: '/images/tmc2209.png', defineValue: 'DRIVER_TYPE_TMC2209_STANDALONE' },
        ]
    },
});

// RA Pulley Teeth step (OAT/OAM)
export const createRAPulleyTeethStep = () => ({
    id: 'RT',
    title: 'RA Pulley Teeth',
    label: 'How many teeth does your RA gear have?',
    variable: 'racog',
    preamble: ['// Using the {v} for RA belt'],
    define: 'RA_PULLEY_TEETH',
    control: {
        type: 'radioimg',
        choices: [
            { key: '1', value: '16 tooth gear (recommended)', image: '/images/cog16t.png', defineValue: '16' },
            { key: '2', value: '20 tooth gear', image: '/images/cog20t.png', defineValue: '20' },
        ]
    },
});

// DEC Stepper step (OAT/OAM)
export const createDECStepperStep = () => ({
    id: 'DS',
    title: 'DEC Stepper',
    label: 'Which stepper motor are you using for DEC:',
    variable: 'decstpr',
    preamble: ['////////////////////////////////', '// DEC Stepper configuration ', '// See supported stepper values. Change according to the steppers you are using', '// Using the {v} stepper for DEC'],
    define: 'DEC_STEPPER_TYPE',
    control: {
        type: 'radioimg',
        choices: [
            { key: 'BY', value: 'Modded 28BYJ-48 (Bipolar)', image: '/images/byj48.png', defineValue: 'STEPPER_TYPE_ENABLED', additionalLines: ['#define DEC_STEPPER_SPR 2048.0f'], condition: "($stepperlib != N)" },
            { key: 'N9', value: 'NEMA 17, 0.9°/step', image: '/images/nema17.png', defineValue: 'STEPPER_TYPE_ENABLED' },
            { key: 'N8', value: 'NEMA 17, 1.8°/step', image: '/images/nema17.png', defineValue: 'STEPPER_TYPE_ENABLED', additionalLines: ['#define DEC_STEPPER_SPR 200.0f'] },
            { key: 'N49', value: 'NEMA 14, 0.9°/step', image: '/images/nema14.png', defineValue: 'STEPPER_TYPE_ENABLED' },
            { key: 'N48', value: 'NEMA 14, 1.8°/step', image: '/images/nema14.png', defineValue: 'STEPPER_TYPE_ENABLED', additionalLines: ['#define DEC_STEPPER_SPR 200.0f'] },
            {
                key: 'N9O',
                value: 'NEMA 17, 0.9°/step',
                image: '/images/nema17.png',
                defineValue: 'STEPPER_TYPE_ENABLED',

                additionalLines: ['#define DEC_STEPPER_SPR                (400 * 9)']
            },
            {
                key: 'N8O',
                value: 'NEMA 17, 1.8°/step',
                image: '/images/nema17.png',
                defineValue: 'STEPPER_TYPE_ENABLED',

                additionalLines: ['#define DEC_STEPPER_SPR                (200 * 9)']
            },
        ]
    },
    postamble: [{
        literal: ['#define DEC_WHEEL_CIRCUMFERENCE        816.814f'],

    }],
});

// DEC Driver step (OAT/OAM)
export const createDECDriverStep = () => ({
    id: 'DDT',
    title: 'DEC Driver',
    label: 'Which driver board are you using to drive the DEC stepper motor:',
    variable: 'decdrv',
    preamble: ['// Using the {v} driver for DEC stepper'],
    define: 'DEC_DRIVER_TYPE',
    control: {
        type: 'radioimg',
        choices: [
            { key: 'A', value: 'Generic A4988', image: '/images/a4988.png', defineValue: 'DRIVER_TYPE_A4988_GENERIC' },
            { key: 'TU', value: 'TMC2209-UART', image: '/images/tmc2209.png', defineValue: 'DRIVER_TYPE_TMC2209_UART' },
            { key: 'TS', value: 'TMC2209-Standalone', image: '/images/tmc2209.png', defineValue: 'DRIVER_TYPE_TMC2209_STANDALONE' },
        ]
    },
});

// DEC Pulley Teeth step (OAT/OAM)
export const createDECPulleyTeethStep = () => ({
    id: 'DT',
    title: 'DEC Pulley Teeth',
    label: 'How many teeth does your DEC gear have?',
    variable: 'deccog',
    preamble: ['// Using the {v} for DEC belt'],
    define: 'DEC_PULLEY_TEETH',
    control: {
        type: 'radioimg',
        choices: [
            { key: '1', value: '16 tooth gear (recommended)', image: '/images/cog16t.png', defineValue: '16' },
            { key: '2', value: '20 tooth gear', image: '/images/cog20t.png', defineValue: '20' },
        ]
    },
});

// Stepper Stealth Mode step (OAT/OAM)
export const createStepperStealthModeStep = () => ({
    id: 'STL',
    title: 'Stepper Stealth Mode',
    label: 'What mode do you want to run the RA and DEC steppers in? If Stealth Mode, they will be inaudible (when not slewing), but have slightly lower performance. In Normal mode, they will make a soft hissing sound, but will have better performance.',
    variable: 'stealhmode',
    condition: "($radrv == TU) AND ($decdrv == TU)",
    preamble: ['// TMC2209 Stealth Mode (spreadCycle) - When set to 0, tracking is more precise, but noisy (high-pitched hissing sound). When set to 1, they are silent.'],
    define: '',
    control: {
        type: 'radioimg',
        choices: [
            { key: 'S', value: 'Stealth Mode (silent)', image: '/images/none.png', additionalLines: ['#define RA_UART_STEALTH_MODE      1', '#define DEC_UART_STEALTH_MODE     1'] },
            { key: 'N', value: 'Normal Mode (hissing)', image: '/images/none.png', additionalLines: ['#define RA_UART_STEALTH_MODE      0', '#define DEC_UART_STEALTH_MODE     0'] },
        ]
    },
});

// Display step (OAT/OAM)
export const createDisplayStep = () => ({
    id: 'DY',
    title: 'Display',
    label: 'What kind of interactive display are you using:',
    variable: 'display',
    define: 'DISPLAY_TYPE',
    preamble: ['////////////////////////////////', '// Display configuration ', '// Define the type of display we are using. Currently: {v}'],
    control: {
        type: 'radioimg',
        choices: [
            { key: 'NO', value: 'No display', image: '/images/none.png', defineValue: 'DISPLAY_TYPE_NONE' },
            { key: 'LCD', value: 'LCD Shield w/ keypad', image: '/images/lcdshield.png', defineValue: 'DISPLAY_TYPE_LCD_KEYPAD' },
            { key: 'I08', value: 'I2C LCD Shield w/ MCP23008 controller', image: '/images/lcd23008.png', defineValue: 'DISPLAY_TYPE_LCD_KEYPAD_I2C_MCP23008' },
            { key: 'I17', value: 'I2C LCD Shield w/ MCP23017 controller', image: '/images/lcd23017.png', defineValue: 'DISPLAY_TYPE_LCD_KEYPAD_I2C_MCP23017' },
            { key: 'S13', value: 'I2C 32x128 OLED w/ joystick', image: '/images/ssd1306.png', defineValue: 'DISPLAY_TYPE_LCD_JOY_I2C_SSD1306' },
        ]
    },
});

// Informational Display step
export const createInfoDisplayStep = () => ({
    id: 'IDY',
    title: 'Informational Display',
    label: 'What kind of information display are you using:',
    variable: 'infodisplay',
    condition: "($display == NO)",
    preamble: ['////////////////////////////////', '// InfoDisplay configuration ', '// Define the type of info display we are using. Currently: {v}'],
    control: {
        type: 'radioimg',
        choices: [
            { key: 'NO', value: 'No info display', image: '/images/none.png', additionalLines: ['#define INFO_DISPLAY_TYPE          INFO_DISPLAY_TYPE_NONE'] },
            { key: 'OLED', value: 'I2C 128x64 OLED display', image: '/images/oledsmall.png', additionalLines: ['#define INFO_DISPLAY_TYPE          INFO_DISPLAY_TYPE_I2C_SSD1306_128x64'] },
        ]
    },
    postamble: [
        { literal: ['#define INFO_DISPLAY_I2C_ADDRESS   0x3C'] },
        { literal: ['#define INFO_DISPLAY_I2C_SDA_PIN   20'] },
        { literal: ['#define INFO_DISPLAY_I2C_SCL_PIN   21'] },
        {
            literal: ['// Note that the E1 port is not usable since I2C requires pin 21!'],
            condition: "($board == M10) OR ($board == M20) OR ($board == M21)",
        },
    ],
});

// WiFi steps (OAT/OAM)
export const createWiFiSteps = () => [
    {
        id: 'WW',
        title: 'Use WiFi',
        label: 'Do you want to enable WiFi:',
        variable: 'wifi',
        condition: "($board == E)",
        preamble: ['////////////////////////////////', '// WiFi configuration ', '// Are we using WiFi: {v}'],
        define: 'WIFI_ENABLED',
        control: {
            type: 'radioimg',
            choices: [
                { key: 'Y', value: 'Yes, use WiFi', image: '/images/wifi.png', defineValue: '1' },
                { key: 'N', value: 'No, disable WiFi', image: '/images/nowifi.png', defineValue: '0' },
            ]
        },
    },
    {
        id: 'WM',
        title: 'WiFi Mode',
        label: 'In what mode do you want to use WiFi:',
        condition: "$wifi == Y",
        variable: 'wifimode',
        preamble: ['// Using WiFi in mode {v}'],
        define: 'WIFI_MODE',
        control: {
            type: 'radioimg',
            choices: [
                { key: 'I', value: 'Infrastructure, all devices connect to same network', image: '/images/infra.png', defineValue: 'WIFI_MODE_INFRASTRUCTURE' },
                { key: 'A', value: 'Access Point, OAT is a hotspot', image: '/images/ap.png', defineValue: 'WIFI_MODE_AP_ONLY' },
                { key: 'F', value: 'Infrastructure with failover to Access Point', image: '/images/failover.png', defineValue: 'WIFI_MODE_ATTEMPT_INFRASTRUCTURE_FAIL_TO_AP' },
            ]
        },
    },
    {
        id: 'WI',
        title: 'WiFi Infrastructure Setup',
        label: 'Enter the WiFi parameters for Infrastructure mode:',
        variable: 'wifiparamsi',
        condition: "($wifi == Y) AND ($wifimode == I)",
        preamble: ['// Define the SSID, WPA key and host name for the network'],
        define: '',
        control: {
            type: 'textinput',
            choices: [
                { key: 'S', label: 'WiFi SSID', defineLine: '#define WIFI_INFRASTRUCTURE_MODE_SSID "{0}"' },
                { key: 'P', label: 'WPA Key', defineLine: '#define WIFI_INFRASTRUCTURE_MODE_WPAKEY "{0}"' },
                { key: 'H', label: 'Hostname', defaultValue: 'OATScope', defineLine: '#define WIFI_HOSTNAME "{0}"' },
            ]
        },
    },
    {
        id: 'WA',
        title: 'WiFi Access Point Setup',
        label: 'Enter the WiFi parameters for Access Point mode:',
        variable: 'wifiparamsa',
        condition: "($wifi == Y) AND ($wifimode == A)",
        define: '',
        preamble: ['// Define the WPA key and host name for the network'],
        control: {
            type: 'textinput',
            choices: [
                { key: 'P', label: 'WPA Key for OAT hotspot', defineLine: '#define WIFI_AP_MODE_WPAKEY "{0}"' },
                { key: 'H', label: 'Hostname', defaultValue: 'OATScope', defineLine: '#define WIFI_HOSTNAME "{0}"' },
            ]
        },
    },
    {
        id: 'WF',
        title: 'WiFi Failover Setup',
        label: 'Enter the WiFi parameters for Failover mode:',
        variable: 'wifiparamsf',
        condition: "($wifi == Y) AND ($wifimode == F)",
        define: '',
        preamble: ['// Define the SSID, WPA keys and host name for the network'],
        control: {
            type: 'textinput',
            choices: [
                { key: 'S', label: 'WiFi SSID of network', defineLine: '#define WIFI_INFRASTRUCTURE_MODE_SSID "{0}"' },
                { key: 'P', label: 'WPA Key for network', defineLine: '#define WIFI_INFRASTRUCTURE_MODE_WPAKEY "{0}"' },
                { key: 'N', label: 'WPA Key for OAT hotspot', defineLine: '#define WIFI_AP_MODE_WPAKEY "{0}"' },
                { key: 'H', label: 'Hostname', defaultValue: 'OATScope', defineLine: '#define WIFI_HOSTNAME "{0}"' },
            ]
        },
    }
];

// Focuser steps (OAT/OAM)
export const createFocuserSteps = () => [
    {
        id: 'FC',
        title: 'Focuser support',
        label: 'Do you want to support a focuser on E1:',
        variable: 'focuser',
        condition: "($board IN [M,M10,M20,M21])",
        preamble: ['////////////////////////////////', '// Focuser configuration ', '// Define whether to support a focusing stepper motor on E1 or not. Currently: {v}'],
        define: '',
        control: {
            type: 'radioimg',
            choices: [
                { key: 'N', value: 'No Focuser', image: '/images/none.png', additionalLines: ['// No Focuser settings'] },
                { key: 'Y', value: 'Focuser stepper', image: '/images/focuser.png' },
            ]
        },
    },
    {
        id: 'FS',
        title: 'Focuser Stepper',
        label: 'Which stepper motor are you using for the Focuser:',
        variable: 'focstpr',
        condition: "$focuser == Y",
        preamble: ['// Using the {v} stepper for FOC'],
        define: 'FOCUS_STEPPER_TYPE',
        control: {
            type: 'radioimg',
            choices: [
                { key: 'BY', value: 'Modded 28BYJ-48 (Bipolar)', image: '/images/byj48.png', defineValue: 'STEPPER_TYPE_ENABLED', additionalLines: ['#define FOCUS_STEPPER_SPR 2048.0f'] },
                { key: 'N9', value: 'NEMA 17, 0.9°/step', image: '/images/nema17.png', defineValue: 'STEPPER_TYPE_ENABLED' },
                { key: 'N8', value: 'NEMA 17, 1.8°/step', image: '/images/nema17.png', defineValue: 'STEPPER_TYPE_ENABLED', additionalLines: ['#define FOCUS_STEPPER_SPR 200.0f'] },
                { key: 'N49', value: 'NEMA 14, 0.9°/step', image: '/images/nema14.png', defineValue: 'STEPPER_TYPE_ENABLED' },
                { key: 'N48', value: 'NEMA 14, 1.8°/step', image: '/images/nema14.png', defineValue: 'STEPPER_TYPE_ENABLED', additionalLines: ['#define FOCUS_STEPPER_SPR 200.0f'] },
            ]
        },
    },
    {
        id: 'FD',
        title: 'Focuser Driver',
        label: 'Which driver board are you using to drive the focuser stepper motor:',
        variable: 'focdrv',
        condition: "$focuser == Y",
        preamble: ['// Using the {v} driver for focuser stepper'],
        define: 'FOCUS_DRIVER_TYPE',
        control: {
            type: 'radioimg',
            choices: [
                { key: 'A', value: 'Generic A4988', image: '/images/a4988.png', defineValue: 'DRIVER_TYPE_A4988_GENERIC' },
                { key: 'TU', value: 'TMC2209-UART', image: '/images/tmc2209.png', defineValue: 'DRIVER_TYPE_TMC2209_UART' },
                { key: 'TS', value: 'TMC2209-Standalone', image: '/images/tmc2209.png', defineValue: 'DRIVER_TYPE_TMC2209_STANDALONE' },
            ]
        },
    },
    {
        id: 'FA',
        title: 'Focuser Advanced Settings',
        label: 'These are some advanced settings you may want to override. The defaults are set already. Please only change them if you are sure what they do and what their valid ranges are. Enter the Focus stepper specs and desired settings:',
        variable: 'focuspower',
        condition: "$focdrv == TU",
        preamble: ['// Define Focus stepper motor power settings'],
        postamble: [{ literal: ['#define FOCUSER_ALWAYS_ON                1'] }],
        define: '',
        control: {
            type: 'textinput',
            choices: [
                { key: 'P', label: 'Power rating in mA', defaultValue: '{Defaults.PowerRating.focstpr}', defineLine: '#define FOCUS_MOTOR_CURRENT_RATING       {0} // mA' },
                { key: 'O', label: 'Operating percentage', defaultValue: '{Defaults.PowerUtilization.focstpr}', defineLine: '#define FOCUS_OPERATING_CURRENT_SETTING  {0} // %' },
                { key: 'S', label: 'Microstepping setting', defaultValue: '{Defaults.FocuserMicrostepping.focstpr}', defineLine: '#define FOCUS_MICROSTEPPING              {0} // steps' },
                { key: 'H', label: 'Hold current percentage (0 to power down)', defaultValue: 10, defineLine: '#define FOCUSER_MOTOR_HOLD_SETTING       {0} // %', additionalLines: ['#define FOCUS_UART_STEALTH_MODE          1 // silent?'] },
            ]
        },
    },
    {
        id: 'FMS',
        title: 'Focuser Motion Settings',
        label: 'These are some advanced settings you may want to override. The defaults are set already. Please only change them if you are sure what they do and what their valid ranges are. Enter the Focuser stepper specs and desired settings:',
        variable: 'focmotion',
        condition: "$focuser == Y",
        preamble: ['// Define some focuser stepper motor settings'],
        define: '',
        control: {
            type: 'textinput',
            choices: [
                { key: 'A', label: 'Acceleration (steps/s/s)', defaultValue: '{Defaults.Acceleration.focstpr}', defineLine: '#define FOCUS_STEPPER_ACCELERATION {0}' },
                { key: 'V', label: 'Maximum Speed (steps/s)', defaultValue: '{Defaults.Speed.focstpr}', defineLine: '#define FOCUS_STEPPER_SPEED {0}' },
            ]
        },
    }
];

// Hall sensor steps (OAT/OAM)
export const createHallSensorSteps = () => [
    {
        id: 'RAH',
        title: 'RA Auto Home via Hall sensors',
        label: 'Do you have the Hall sensor-based AutoHome add ons installed on the RA axis:',
        variable: 'hallhomera',
        condition: "($board IN [M,M21])",
        preamble: ['////////////////////////////////', '// Auto Homing addons'],
        define: 'USE_HALL_SENSOR_RA_AUTOHOME',
        control: {
            type: 'radioimg',
            choices: [
                { key: 'N', value: 'No RA Hall sensor homing', image: '/images/none.png', defineValue: '0' },
                { key: 'Y', value: 'RA Homing Hall sensor installed', image: '/images/none.png', defineValue: '1' },
            ]
        },
    },
    {
        id: 'RAHA',
        title: 'RA Auto Home Settings',
        label: 'What settings would you like to use for the RA homing sensor:',
        variable: 'hallhomerasettings',
        condition: "($hallhomera == Y)",
        define: '',
        control: {
            type: 'textinput',
            choices: [
                { key: 'P', label: 'Pin that sensor is attached to', defaultValue: '{Defaults.RAHallSensorPin.tracker}', defineLine: '#define RA_HOMING_SENSOR_PIN            {0}' },
                { key: 'S', label: 'Number of degrees to search for sensor', defaultValue: '10', defineLine: '#define RA_HOMING_SENSOR_SEARCH_DEGREES {0}' },
            ]
        },
    }
];